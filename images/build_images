#!/usr/bin/env python3
# Copyright 2017 StreamSets Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import argparse
import logging
import subprocess
from collections import namedtuple
from os.path import dirname, join, realpath

import requests

logging.basicConfig(level=logging.WARNING)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

CSD_URL_TEMPLATE = 'http://{s3_bucket}/datacollector/{build}/csd/STREAMSETS-{0}.jar'
DEFAULT_S3_BUCKET = 'nightly.streamsets.com'
DEFAULT_BUILD = 'latest'
EARLIEST_SDC_VERSION_WITH_LEGACY_MANIFEST = (3, 0, 0, 0)
EL_VERSIONS = ['el6', 'el7']
IMAGE_NAME_TEMPLATE = 'streamsets/clusterdock:topology_cdh-streamsets_datacollector-{}'
LEGACY_STAGE_LIBS_INDEX_URL_TEMPLATE = 'http://{s3_bucket}/datacollector/{build}/legacy/index.html'
PARCEL_URL_TEMPLATE = ('http://{s3_bucket}/datacollector/{build}/parcel/'
                       'STREAMSETS_DATACOLLECTOR-{sdc_version}-{el_version}.parcel')
PARCEL_MANIFEST_URL_TEMPLATE = 'http://{s3_bucket}/datacollector/{build}/parcel/manifest.json'
# Name of service in CDH cluster.
SDC_PRODUCT_NAME = 'STREAMSETS_DATACOLLECTOR'

ParcelDockerImage = namedtuple('ParcelDockerImage', ['name', 'parcel_url', 'tag'])


def main():
    parser = argparse.ArgumentParser(description=('Build Docker images with StreamSets '
                                                  'Data Collector parcels for clusterdock'),
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--sdc-build',
                        help='The build from which to install SDC(e.g. of the form "2038," "2.4," "latest")',
                        default=DEFAULT_BUILD)
    parser.add_argument('--dry-run', help="Don't actually do the `docker build`", action='store_true')
    parser.add_argument('--sdc-s3-bucket',
                        help='S3 bucket to get SDC parcels from',
                        default=DEFAULT_S3_BUCKET)
    parser.add_argument('--sdc-version-tag',
                        help='A tag to use for images instead of the SDC version gleamed from '
                             'stage-lib-manifest.properties',
                        metavar='tag')
    parser.add_argument('-p', '--push', help='Push Docker images after building', action='store_true')
    args = parser.parse_args()

    if args.dry_run:
        logger.info('Doing dry-run of tool ...')

    sdc_version = _get_sdc_version(PARCEL_MANIFEST_URL_TEMPLATE.format(build=args.sdc_build,
                                                                       s3_bucket=args.sdc_s3_bucket))

    images = _get_sdc_images(args, sdc_version)
    _build_and_push_images(args, images, sdc_version)


def _build_and_push_images(args, images, sdc_version):
    image_folder = join(realpath(dirname(__file__)), 'cloudera_service')
    legacy_libs_index = _get_legacy_stage_libs_index(sdc_version, args.sdc_build, args.sdc_s3_bucket)
    csd_url = CSD_URL_TEMPLATE.format(sdc_version, build=args.sdc_build, s3_bucket=args.sdc_s3_bucket)

    for image in images:
        cmd = ('docker build -t {image_name} --label "legacy-libs={legacy_libs_index}" --build-arg CSD_URL={csd_url}'
               ' --build-arg PARCEL_URL={image_parcel_url} --build-arg PRODUCT={product_name} {image_folder}')
        cmd = cmd.format(image_name=image.name,
                         legacy_libs_index=legacy_libs_index,
                         csd_url=csd_url,
                         image_parcel_url=image.parcel_url,
                         product_name=SDC_PRODUCT_NAME,
                         image_folder=image_folder)
        logger.debug('Running Docker build command (%s) ...', cmd)
        if not args.dry_run:
            subprocess.run(cmd, shell=True, check=True)

        cmd = 'docker tag {} {}'.format(image.name, image.tag)
        logger.debug('Running Docker tag command (%s)...', cmd)
        if not args.dry_run:
            subprocess.run(cmd, shell=True, check=True)

        if args.push:
            for item in [image.name, image.tag]:
                cmd = 'docker push {}'.format(item)
                logger.debug('Running Docker push command (%s) ...', cmd)
                if not args.dry_run:
                    subprocess.run(cmd, shell=True, check=True)


def _get_sdc_images(args, sdc_version):
    images = []
    tag_version = args.sdc_version_tag or sdc_version
    image_name = IMAGE_NAME_TEMPLATE.format(tag_version)
    tag = IMAGE_NAME_TEMPLATE.format('{}-latest'.format(tag_version.split('-')[0]))

    for el_version in EL_VERSIONS:
        el_image_name = '{}-{}'.format(image_name, el_version)
        el_tag = '{}-{}'.format(tag, el_version)
        parcel_url = PARCEL_URL_TEMPLATE.format(sdc_version=sdc_version,
                                                build=args.sdc_build,
                                                s3_bucket=args.sdc_s3_bucket,
                                                el_version=el_version)
        images.append(ParcelDockerImage(name=el_image_name,
                                        parcel_url=parcel_url,
                                        tag=el_tag))
    return images


def _get_legacy_stage_libs_index(sdc_version, build, s3_bucket):
    """Fetch the contents of legacy index.html file to determine the legacy stage libs. Returns it as a string."""
    sdc_version_tuple = tuple(int(i) if i.isdigit() else i for i in sdc_version.split('.'))
    if sdc_version_tuple < EARLIEST_SDC_VERSION_WITH_LEGACY_MANIFEST:
        # No legacy index.html is available for these SDC versions.
        return ''

    url = LEGACY_STAGE_LIBS_INDEX_URL_TEMPLATE.format(s3_bucket=s3_bucket, build=build)
    response = _get(url)
    if not response.content:
        raise Exception('No legacy stage libs found in index.html.')
    return response.content.decode()


def _get_sdc_version(url):
    """Parse the parcel manifest.json file to determine the SDC version corresponding to this build.  """
    response = _get(url)
    if not response.content:
        raise Exception('No SDC version found in manifest.json.')
    content = response.json()
    return content['parcels'][0]['components'][0]['version']


def _get(url):
    response = requests.get(url)
    response.raise_for_status()
    return response


if __name__ == '__main__':
    main()
